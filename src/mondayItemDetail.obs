<template>
    <Panel id="pnlItem" class="panel panel-block">
        <div class="panel-heading bcc-monday-panel-heading row">
            <div class="col-xs-6 p-0">
                <h1 class="panel-title d-flex flex-column justify-content-center">
                    <div v-text="item.Name"></div>
                    <div>
                        <span class="text-muted" style="font-size: 0.8rem;" v-text="item.CreatedAt"></span>
                    </div>
                </h1>
            </div>
            <div class="col-xs-6 text-right p-0">
                <RockButton id="bbtnApprove" class="btn btn-secondary" @click="bbtnApprove_Click">Approve Request</RockButton>
                <RockButton id="bbtnClose" class="btn btn-secondary" @click="bbtnClose_Click">Close Request</RockButton>
            </div>
        </div>
        <div class="panel-body" style="width:100%">
            <div class="bcc-monday-column-group">
                <div class="d-flex mb-3 flex-wrap" style="justify-content: space-between">
                    <template v-for="columnValue in item.ColumnValues" :key="columnValue.ColumnId">
                        <div>Column Values for-loop</div>
                    </template>
                </div>
            </div>
            <div class="mb-3">
                <TextBox id="tbNewUpdate" textMode="multiline" class="mb-2" placeholder="Write a new update..."></TextBox>
                <RockButton id="bbtnNewUpdateOpen" :onClick="bbtnNewUpdateOpen_Click" class="btn btn-primary w-100">New Update</RockButton>
                <div style="display: flex; align-items: flex-start; justify-content: space-between; flex-direction: row-reverse;">
                    <div>
                        <RockButton id="bbtnNewUpdateSave" :onClick="bbtnNewUpdateSave_Click" class="btn btn-primary">Save</RockButton>
                        <RockButton id="bbtnNewUpdateCancel" :onClick="bbtnNewUpdateCancel_Click" class="btn btn-secondary">Cancel</RockButton>
                    </div>
                    <div>
                        <div>File Uploader Here</div>
                    </div>
                </div>
            </div>

            <template v-for="update in item.Updates" :key="update.Id">
                <div id="mondayUpdate" class="bcc-monday-well-group">
                    <div class="well">
                        <p v-text="update.TextBody"></p>
                        <div>
                            <span class="font-weight-bold" v-text="update.CreatorName"></span>
                            <span v-text="update.CreatedAt"></span>
                        </div>
                        <template v-for="file in update.files">
                            <a :href="file.PublicUrl" v-text="file.Name"></a>
                            <br>
                        </template>
                    </div>
                    <template v-for="reply in update.Replies" :key="reply.Id">
                        <div class="row d-flex flex-nowrap align-items-center">
                            <i class="fa fa-reply fa-rotate-180 fa-2x m-2 d-inline-block"></i>
                            <div class="well d-inline-block">
                                <p v-text="reply.TextBody"></p>
                                <div>
                                    <span style="word-break: break-all" class="font-weight-bold" v-text="reply.CreatorName"></span>
                                    <span v-text="reply.CreatedAt"></span>
                                </div>
                            </div>
                        </div>
                    </template>
                    <div class="row">
                        <div class="col-md-12 d-flex mb-2 p-0 mt-2">
                            <div class="d-flex align-items-center">
                                <i class="fa fa-reply fa-rotate-180 fa-2x m-2"></i>
                            </div>
                            <div class="d-flex flex-column justify-content-center w-100">
                                <TextBox id="tbNewReply" v-model="text" textMode="multiline" :rows="5" class="mb-2" placeholder="Write a new reply..."></TextBox>
                                <div>
                                    <RockButton id="bbtnNewReplyOpen" class="btn btn-secondary">New Reply</RockButton>
                                    <RockButton id="bbtnNewReplySave" class="btn btn-primary">Save</RockButton>
                                    <RockButton id="bbtnNewReplyCancel" class="btn btn-secondary">Cancel</RockButton>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </template>
        </div>
    </Panel>
</template>

<script setup lang="ts">
import { computed, onMounted, ref } from "vue";
import { onConfigurationValuesChanged, useConfigurationValues, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
import RockButton from "@Obsidian/Controls/rockButton";
import { BtnType } from "@Obsidian/Enums/Controls/btnType";
import { BtnSize } from "@Obsidian/Enums/Controls/btnSize";
import Panel from "@Obsidian/Controls/panel";
import TextBox from "@Obsidian/Controls/textBox";
import Dialog from "@Obsidian/Controls/dialog";
import type { MondayItemDetailBag } from "./ViewModels/MondayItemDetailBag";

const notFound = ref(false);
const config = useConfigurationValues<MondayItemDetailBag | null>();
const invokeBlockAction = useInvokeBlockAction();
const reloadBlock = useReloadBlock();

//#region Values

const isRunning = ref<boolean>(false);
const runResult = ref<string>("");
const errorMessage = ref<string>("");
const lavaTemplate = ref<string>("");

//#endregion

//#region Computed Values

//#endregion

//#region Events

async function saveUpdate(): Promise<boolean> {
    const errorMessage = "";
    const result = await invokeBlockAction("SaveUpdate", {});

    return false;
}

async function saveReply(): Promise<boolean> {
    const errorMessage = "";
    const result = await invokeBlockAction("SaveReply", {});

    return false;
}

/**
 * Event handler for the form being submitted.
 */
async function runLava(): Promise<void> {
    try {
        isRunning.value = true;
        runResult.value = "";
        errorMessage.value = "";

        const bag: RunLavaBag = {
            Lava: lavaTemplate.value
        };

        const result = await invokeBlockAction<string>("RunLava", { runLavaBag: bag });

        if (result?.isSuccess) {
            isRunning.value = false;
            runResult.value = result.data || "";
        }
        else {
            errorMessage.value = result?.errorMessage || "An unexpected error occurred while saving.";
        }
    } finally {
        isRunning.value = false;
    }
}

//#endregion

//#region Functions

//#endregion

onConfigurationValuesChanged(reloadBlock);

</script>