<template>
    <Panel id="pnlItem" class="panel panel-block">
        <div class="panel-heading bcc-monday-panel-heading row">
            <div class="col-xs-6 p-0">
                <h1 class="panel-title d-flex flex-column justify-content-center">
                    <div v-text="item.name"></div>
                    <div>
                        <span class="text-muted" style="font-size: 0.8rem;" v-text="item.createdAt"></span>
                    </div>
                </h1>
            </div>
            <div class="col-xs-6 text-right p-0">
                <RockButton id="bbtnApprove" class="btn btn-secondary" >Approve Request</RockButton>
                <RockButton id="bbtnClose" class="btn btn-secondary" >Close Request</RockButton>
            </div>
        </div>
        <div class="panel-body" style="width:100%">
            <div class="bcc-monday-column-group">
                <div class="d-flex mb-3 flex-wrap" style="justify-content: space-between">
                    <template v-for="columnValue in item.columnValues" :key="columnValue.ColumnId">
                        <FileColumnValue v-if="columnValue.type == 'file'"></FileColumnValue>
                        <StatusColumnValue v-else-if="columnValue.type == 'status'"></StatusColumnValue>
                        <BasicColumnValue v-else></BasicColumnValue>
                    </template>
                </div>
            </div>
            <div class="mb-3">
                <!-- <TextBox id="tbNewUpdate" textMode="multiline" class="mb-2" placeholder="Write a new update..."></TextBox> -->
                <RockButton id="bbtnNewUpdateOpen" class="btn btn-primary w-100">New Update</RockButton>
                <div style="display: flex; align-items: flex-start; justify-content: space-between; flex-direction: row-reverse;">
                    <div>
                        <RockButton id="bbtnNewUpdateSave" class="btn btn-primary">Save</RockButton>
                        <RockButton id="bbtnNewUpdateCancel" class="btn btn-secondary">Cancel</RockButton>
                    </div>
                    <div>
                        <div>File Uploader Here</div>
                    </div>
                </div>
            </div>

            <template v-for="update in item.updates" :key="update.Id">
               <MondayUpdate :update="update"/>
            </template>
        </div>
    </Panel>
</template>

<script setup lang="ts">
import { computed, onMounted, ref } from "vue";
import { onConfigurationValuesChanged, useConfigurationValues, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
import RockButton from "@Obsidian/Controls/rockButton";
import { BtnType } from "@Obsidian/Enums/Controls/btnType";
import { BtnSize } from "@Obsidian/Enums/Controls/btnSize";
import Panel from "@Obsidian/Controls/panel";
import TextBox from "@Obsidian/Controls/textBox";
import type { MondayItemDetailBag } from "./ViewModels/MondayItemDetailBag";
import MondayUpdate from "./mondayItemDetail/mondayUpdate.partial.obs";

const notFound = ref(false);
const config = useConfigurationValues<MondayItemDetailBag>();
const invokeBlockAction = useInvokeBlockAction();
const reloadBlock = useReloadBlock();

//#region Values

const isRunning = ref<boolean>(false);
const runResult = ref<string>("");
const errorMessage = ref<string>("");
const lavaTemplate = ref<string>("");
const item = config;

//#endregion

//#region Computed Values

//#endregion

//#region Events

async function saveUpdate(): Promise<boolean> {
    const errorMessage = "";
    const result = await invokeBlockAction("SaveUpdate", {});

    return false;
}

async function saveReply(): Promise<boolean> {
    const errorMessage = "";
    const result = await invokeBlockAction("SaveReply", {});

    return false;
}

/**
 * Event handler for the form being submitted.
 */
/*
async function runLava(): Promise<void> {
    try {
        isRunning.value = true;
        runResult.value = "";
        errorMessage.value = "";

        const bag: RunLavaBag = {
            Lava: lavaTemplate.value
        };

        const result = await invokeBlockAction<string>("RunLava", { runLavaBag: bag });

        if (result?.isSuccess) {
            isRunning.value = false;
            runResult.value = result.data || "";
        }
        else {
            errorMessage.value = result?.errorMessage || "An unexpected error occurred while saving.";
        }
    } finally {
        isRunning.value = false;
    }
}
*/

//#endregion

//#region Functions

//#endregion

onConfigurationValuesChanged(reloadBlock);

</script>